#include "cann.h"
#include <cmath>
void cann(int A[200], int B[200], float W[194481], int C[200]) {
	cann_label8:for(int i=0;i<200;i++){
		C[i]=A[i];
	}
	float Iext1[441], P[441], dp[441], U[441] = { 0.0 }, du[441], r[441] = { 0.0 };
	int number = 0;
	float max = 0;

	cann_label0:for (int i = 0; i < 441; i++){
		P[i] = 1;}
	int xc[2][441] = { {-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240,-10240,-9216,-8192,-7168,-6144,-5120,-4096,-3072,-2048,-1024,0,1024,2048,3072,4096,5120,6144,7168,8192,9216,10240},
{-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-10240,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-9216,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-8192,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-7168,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-6144,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-5120,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-4096,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-3072,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-2048,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,-1024,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,2048,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,3072,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,4096,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,5120,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,6144,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,7168,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,9216,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240,10240}
};
	cann_label1:for (int i = 0; i < 100; i++) {
		cann_label2:for (int j = 0; j < 441; j++) {
			float a0 = (float)A[i] / N;
			float a1 = (float)A[i+100] / N;
			float xc0 = (float)xc[0][j] / N;
			float xc1 = (float)xc[1][j] / N;
			Iext1[j] = exp(-2 * ((xc0 - a0) * (xc0- a0) + (xc1 - a1) * (xc1 - a1))) / 2;
		}
		cann_label3:for (int j = 0; j < 441; j++) {
			dp[j] = (1 - P[j] - 2 * P[j] * r[j]) / 20;
		}
		cann_label9:for (int j = 0; j < 441; j++)
		{
			float mid = 0.0;
			cann_label4:for (int k = 0; k < 441; k++) {
				mid = mid + W[j*441+k]/N * (P[k] * r[k]);
			}
			du[j] = (-U[j] + 6.8906 * mid + Iext1[j]) / 2;
		}
		cann_label5:for (int j = 0; j < 441; j++)
		{
			P[j] = P[j] + dp[j] * 4;
			U[j] = U[j] + du[j] * 4;
		}
		cann_label6:for (int j = 0; j < 441; j++)
		{
			float sum = 0;

			cann_label7:for (int k = 0; k < 441; k++) {
				sum = sum + U[k] * U[k];
			}
			r[j] = U[j] * U[j] / (1 + 0.023 * 6.8906 * sum);
			if (r[j] > max) {
				max = r[j];
				number = j;
			}
		}
		B[i] = xc[0][number];
		B[i+100] = xc[1][number];
		max = 0;
		number = 0;
	}
}
